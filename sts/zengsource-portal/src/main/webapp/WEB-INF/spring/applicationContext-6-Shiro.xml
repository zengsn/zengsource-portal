<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">

	
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
	    <property name="securityManager" ref="securityManager"/>
	    <!-- override these for application-specific URLs if you like:-->
	    <property name="loginUrl" value="/signin.jxp"/>
	    <property name="successUrl" value="/home/"/>
	    <property name="unauthorizedUrl" value="/unauthorized.jxp"/> 
	    <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
	    <!-- defined will be automatically acquired and available via its beanName in chain        -->
	    <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
	    <!-- <property name="filters">
	        <util:map>
	            <entry key="anAlias" value-ref="someFilter"/>
	        </util:map>
	    </property> -->
	    <property name="filterChainDefinitions">
	        <value>
	            # some example chain definitions:
	            /system/ = authc, roles[admin]
	            /system/**.jxp = authc, roles[admin]
	            /user/ = authc, roles[member]
	            /user/**.jxp = authc, roles[member]
	            /social/ = authc, roles[member]
	            /social/**.jxp = authc, roles[member]
	            /task/ = authc, roles[member]
	            /task/**.jxp = authc, roles[member]
	            /home/ = authc, roles[member]
	            /home/**.jxp = authc, roles[member]
	            /docs/** = authc, perms[document:read]
	            # /** = authc
	            # more URL-to-FilterChain definitions here
	        </value>
	    </property>
	</bean>
	
	<!-- Define any javax.servlet.Filter beans you want anywhere in this application context.   -->
	<!-- They will automatically be acquired by the 'shiroFilter' bean above and made available -->
	<!-- to the 'filterChainDefinitions' property.  Or you can manually/explicitly add them     -->
	<!-- to the shiroFilter's 'filters' Map if desired. See its JavaDoc for more details.       -->
	<!-- 
	<bean id="someFilter" class="..."/>
	<bean id="anotherFilter" class="..."> ... </bean>
	 -->
	 
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
	    <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
	    <property name="realm" ref="hibernateRealm"/>
	    <!-- By default the servlet container sessions will be used.  Uncomment this line
	         to use shiro's native sessions (see the JavaDoc for more): -->
	    <!-- <property name="sessionMode" value="native"/> -->
	</bean>
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
	
	<!-- Define the Shiro Realm implementation you want to use to connect to your back-end -->
	<!-- security datasource: -->
	<bean id="hibernateRealm" class="org.zengsource.portal.shiro.HibernateRealm">
		<property name="credentialsMatcher">
			<ref local="sha256Matcher"/>
		</property>
		<property name="userService">
			<ref bean="userService"/>
		</property>
		<property name="cacheManager">
			<ref bean="ehcacheManager"/>
		</property>
	</bean>
	<bean id="sha256Matcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
		<property name="hashAlgorithmName">
			<value>SHA-256</value>
		</property>
	</bean>
	
	<!-- Enable Shiro Annotations for Spring-configured beans.  Only run after -->
	<!-- the lifecycleBeanProcessor has run: -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
	    <property name="securityManager" ref="securityManager"/>
	</bean>
	<bean id="ehcacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManager">
			<ref bean="cacheManager"/>
		</property>
	</bean>

</beans>